#!/usr/bin/ruby
require 'optparse'
require "churn.rb"
require "churn_affected_line.rb"
require "churn_interactive.rb"
require "churn_standard.rb"
require "json_output.rb"
require "text_output.rb"

CHURN_OPTS = {format: ['-j', '--json'], compute: ['-a', '--affected-lines', '-i', '--interactive-lines']}
# remove from ARGV our options
argv = ARGV - CHURN_OPTS.values.flatten
# make one string for all other parameters that git will deal with
git_params = argv.reduce{ |a, b| a + " " + b} || ""

churn_opts = {}
a = false
i = false

OptionParser.new do |opts|
  opts.banner = "churn [--affected-lines | --interactive-lines] [--json] [any git params]"
  opts.separator "Command line that returns churn related metrics."
  opts.version = InteractiveChurn::VERSION
  opts.on('--json', 'Return metric in json format') { churn_opts[:format] = '--json' }
  opts.on('--affected-lines', 'Compute affected lines') { a = true; churn_opts[:compute] = '--affected-lines' }
  opts.on('--interactive-lines', 'Compute interactive lines') { i = true; churn_opts[:compute] = '--interactive-lines' }

  begin
    opts.parse!
    raise OptionParser::ParseError.new("--affected-lines and --interactive-lines are mutually exclusive") if a && i

    opt = churn_opts.merge({git_params: git_params})

    if opt[:compute] == '--affected-lines'
      ChurnAffectedLine::root_directory = Dir.getwd
      puts JsonOutput.affected_lines( ChurnAffectedLine::compute opt) if opt[:format] == '--json'
      puts TextOutput.affected_lines( ChurnAffectedLine::compute opt) if opt[:format] == nil
    elsif opt[:compute] == '--interactive-lines'
      ChurnInteractive::root_directory = Dir.getwd
      puts JsonOutput.interactive_lines( ChurnInteractive::compute opt) if opt[:format] == '--json'
      puts TextOutput.interactive_lines( ChurnInteractive::compute opt) if opt[:format] == nil
    else
      ChurnStandard::root_directory = Dir.getwd
      puts JsonOutput.standard( ChurnStandard::compute opt) if opt[:format] == '--json'
      puts TextOutput.standard( ChurnStandard::compute opt) if opt[:format] == nil
    end

  rescue OptionParser::ParseError => error
    puts error
    puts "(-h or --help will show valid options)"
    exit 1
  rescue Exception => e
    puts e.message
  end
end
